(function() {
    if (typeof window.ReactLeaflet === 'undefined') {
        window.ReactLeaflet = {};
    }

    const { createElement, Component } = React;

    class MapContainer extends Component {
        constructor(props) {
            super(props);
            this.mapRef = React.createRef();
            this.state = { map: null };
        }

        componentDidMount() {
            const L = window.L;
            if (!L) {
                console.error('Leaflet is not loaded');
                return;
            }
            const { center = [44.5, 34.1], zoom = 10 } = this.props;
            const map = L.map(this.mapRef.current).setView(center, zoom);
            this.setState({ map });
        }

        componentDidUpdate(prevProps) {
            if (this.state.map && (prevProps.center !== this.props.center || prevProps.zoom !== this.props.zoom)) {
                this.state.map.setView(this.props.center, this.props.zoom);
            }
        }

        componentWillUnmount() {
            if (this.state.map) {
                this.state.map.remove();
            }
        }

        render() {
            const children = React.Children.map(this.props.children, child => {
                return child ? React.cloneElement(child, { map: this.state.map }) : null;
            });
            return createElement('div', { ref: this.mapRef, style: { height: '100%', width: '100%' }, ...this.props }, children);
        }
    }

    class TileLayer extends Component {
        componentDidMount() {
            const L = window.L;
            if (this.props.map && L) {
                this.layer = L.tileLayer(this.props.url, this.props).addTo(this.props.map);
            }
        }

        componentDidUpdate(prevProps) {
            if (this.layer && prevProps.url !== this.props.url) {
                this.layer.setUrl(this.props.url);
            }
        }

        componentWillUnmount() {
            if (this.layer) {
                this.layer.remove();
            }
        }

        render() {
            return null;
        }
    }

    class Polyline extends Component {
        componentDidMount() {
            const L = window.L;
            if (this.props.map && L) {
                this.line = L.polyline(this.props.positions, this.props).addTo(this.props.map);
                if (this.props.children) {
                    this.line.bindPopup(this.props.children);
                }
            }
        }

        componentDidUpdate(prevProps) {
            if (this.line && prevProps.positions !== this.props.positions) {
                this.line.setLatLngs(this.props.positions);
            }
        }

        componentWillUnmount() {
            if (this.line) {
                this.line.remove();
            }
        }

        render() {
            return null;
        }
    }

    class Marker extends Component {
        componentDidMount() {
            const L = window.L;
            if (this.props.map && L) {
                this.marker = L.marker(this.props.position, this.props).addTo(this.props.map);
                if (this.props.children) {
                    this.marker.bindPopup(this.props.children);
                }
            }
        }

        componentDidUpdate(prevProps) {
            if (this.marker && prevProps.position !== this.props.position) {
                this.marker.setLatLng(this.props.position);
            }
        }

        componentWillUnmount() {
            if (this.marker) {
                this.marker.remove();
            }
        }

        render() {
            return null;
        }
    }

    class Popup extends Component {
        render() {
            return createElement('div', null, this.props.children);
        }
    }

    window.ReactLeaflet = {
        MapContainer,
        TileLayer,
        Polyline,
        Marker,
        Popup
    };
})();